import numpy as np
import matplotlib.pyplot as plt

def activation_function(value):
    return np.where(value >= 0, 1, 0)

def perceptron_training(X, y, learning_rate=0.1, epochs=10):
    weights = np.random.randn(X.shape[1])
    bias = np.random.randn()
    
    for epoch in range(epochs):
        for i in range(len(X)):
            y_pred = activation_function(np.dot(X[i], weights) + bias)
            
            error = y[i] - y_pred
            weights += learning_rate * error * X[i]
            bias += learning_rate * error
    
    return weights, bias

X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])  
y = np.array([0, 0, 0, 1]) 

weights, bias = perceptron_training(X, y)

x_vals = np.linspace(-0.2, 1.2, 100)
y_vals = (-weights[0] * x_vals - bias) / weights[1]

plt.figure(figsize=(6, 5))

for i in range(len(X)):
    if y[i] == 0:
        plt.scatter(X[i][0], X[i][1], marker="o", color="red", label="Class 0" if i == 0 else "")
    else:
        plt.scatter(X[i][0], X[i][1], marker="s", color="blue", label="Class 1" if i == 2 else "")

plt.plot(x_vals, y_vals, "--", color="black", label="Decision Boundary")

plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.title("Perceptron Decision Boundary")
plt.legend()
plt.grid()
plt.show()